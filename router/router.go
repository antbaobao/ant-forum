package router

import (
	"ant-forum/handler/sd"
	"ant-forum/handler/v1/articles"
	"ant-forum/handler/v1/categories"
	"ant-forum/handler/v1/menu"
	"ant-forum/handler/v1/role"
	"ant-forum/handler/v1/tags"
	"ant-forum/handler/v1/user"
	"ant-forum/router/middleware"

	_ "ant-forum/docs" // docs is generated by Swag CLI, you have to import it.

	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
)

// Load loads the middlewares, routes, handlers.
func Load(g *gin.Engine, mw ...gin.HandlerFunc) *gin.Engine {
	// Middlewares.
	g.Use(gin.Recovery())
	g.Use(middleware.NoCache)
	g.Use(middleware.Options)
	g.Use(middleware.Secure)
	g.Use(mw...)
	// 404 Handler.
	g.NoRoute(func(c *gin.Context) {
		c.String(http.StatusNotFound, "The incorrect API route.")
	})
	// swagger api 文档
	g.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	// 登录
	g.POST("/v1/login", user.Login)

	g.GET("/v1/auth/info", user.GetUserInfo)
	//rInfo.Use(middleware.AuthMiddleware())

	// 用户相关
	rUser := g.Group("/v1/user")
	//rUser.Use(middleware.AuthMiddleware())
	{
		// 登录鉴权后获取用户信息
		rUser.POST("", user.Create)
		rUser.DELETE("/:id", user.Delete)
		rUser.PUT("/:id", user.Update)
		rUser.GET("", user.List)
		rUser.GET("/:id", user.GetUserById)
	}
	// 标签相关
	rTags := g.Group("/v1/tags")
	// t.Use(middleware.AuthMiddleware())
	{
		rTags.POST("", tags.Create)
		rTags.GET("", tags.List)
		rTags.DELETE("/:id", tags.Delete)
		rTags.GET("/:id", tags.GetTagById)
	}
	// 分类相关
	rCategories := g.Group("/v1/categories")
	// c.Use(middleware.AuthMiddleware())
	{
		rCategories.POST("", categories.Create)
		rCategories.GET("", categories.List)
		rCategories.DELETE("/:id", categories.Delete)
		rCategories.GET("/:id", categories.GetCategoryById)
	}
	// 文章相关
	rArticles := g.Group("/v1/articles")
	// a.Use(middleware.AuthMiddleware())
	{
		rArticles.POST("", articles.Create)
		rArticles.GET("", articles.List)
		rArticles.DELETE("/:id", articles.Delete)
		rArticles.GET("/:id", articles.GetArticleById)
	}
	// 菜单相关
	rMenu := g.Group("/v1/menu")
	// a.Use(middleware.AuthMiddleware())
	{
		rMenu.POST("", menu.Create)
		rMenu.GET("", menu.List)
		rMenu.DELETE("/:id", menu.Delete)
		rMenu.GET("/:id", menu.GetMenu)
		rMenu.PUT("/:id", menu.Update)
	}
	// 角色相关
	rRole := g.Group("/v1/role")
	// a.Use(middleware.AuthMiddleware())
	{
		rRole.POST("", role.Create)
		rRole.GET("", role.List)
		rRole.DELETE("/:id", role.Delete)
		rRole.GET("/:id", role.GetRole)
	}
	// 健康检查
	rSd := g.Group("/sd")
	{
		rSd.GET("/health", sd.HealthCheck)
		rSd.GET("/disk", sd.DiskCheck)
		rSd.GET("/cpu", sd.CPUCheck)
		rSd.GET("/ram", sd.RAMCheck)
	}
	return g
}
