definitions:
  articles.CreateRequest:
    properties:
      category_id:
        type: integer
      content:
        type: string
      tag_id:
        type: integer
      title:
        type: string
      user_id:
        type: integer
    type: object
  articles.GetArticleInfo:
    properties:
      avatar:
        type: string
      category_id:
        type: integer
      category_name:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tag_id:
        type: integer
      tag_name:
        type: string
      title:
        type: string
      update_at:
        type: string
      user_id:
        type: integer
      username:
        type: string
    type: object
  articles.ListResponse:
    properties:
      list:
        items:
          $ref: '#/definitions/model.ArticleInfo'
        type: array
      totalCount:
        type: integer
    type: object
  categories.CreateRequest:
    properties:
      category_name:
        type: string
    type: object
  categories.CreateResponse:
    properties:
      category_name:
        type: string
    type: object
  categories.ListResponse:
    properties:
      list:
        items:
          $ref: '#/definitions/model.CategoryInfo'
        type: array
      totalCount:
        type: integer
    type: object
  menu.CreateRequest:
    properties:
      method:
        type: string
      name:
        type: string
      path:
        type: string
    required:
    - method
    - name
    - path
    type: object
  menu.CreateResponse:
    properties:
      method:
        type: string
      name:
        type: string
      path:
        type: string
    type: object
  menu.ListResponse:
    properties:
      list:
        items:
          $ref: '#/definitions/model.MenuInfo'
        type: array
      totalCount:
        type: integer
    type: object
  model.ArticleInfo:
    properties:
      avatar:
        type: string
      category_id:
        type: integer
      category_name:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tag_id:
        type: integer
      tag_name:
        type: string
      title:
        type: string
      update_at:
        type: string
      user_id:
        type: integer
      username:
        type: string
    type: object
  model.CategoryInfo:
    properties:
      category_name:
        type: string
      id:
        type: integer
    type: object
  model.MenuInfo:
    properties:
      id:
        type: integer
      method:
        type: string
      name:
        type: string
      path:
        type: string
    type: object
  model.MenuModel:
    properties:
      method:
        type: string
      name:
        type: string
      path:
        type: string
    required:
    - method
    - name
    - path
    type: object
  model.RoleInfo:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  model.RoleModel:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  model.TagInfo:
    properties:
      id:
        type: integer
      tag_name:
        type: string
    type: object
  model.UserInfo:
    properties:
      avatar:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  model.UserModel:
    properties:
      avatar:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - avatar
    - password
    - username
    type: object
  role.CreateRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  role.CreateResponse:
    properties:
      name:
        type: string
    type: object
  role.ListResponse:
    properties:
      list:
        items:
          $ref: '#/definitions/model.RoleInfo'
        type: array
      totalCount:
        type: integer
    type: object
  tags.CreateRequest:
    properties:
      tag_name:
        type: string
    required:
    - tag_name
    type: object
  tags.CreateResponse:
    properties:
      tag_name:
        type: string
    type: object
  tags.ListResponse:
    properties:
      list:
        items:
          $ref: '#/definitions/model.TagInfo'
        type: array
      totalCount:
        type: integer
    type: object
  user.CreateRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  user.CreateResponse:
    properties:
      username:
        type: string
    type: object
  user.ListResponse:
    properties:
      totalCount:
        type: integer
      userList:
        items:
          $ref: '#/definitions/model.UserInfo'
        type: array
    type: object
  user.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  user.LoginResponse:
    properties:
      username:
        type: string
    type: object
  v1.Response:
    properties:
      code:
        type: integer
      data:
        type: object
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: 2929712050@qq.com
    name: ant
    url: http://www.swagger.io/support
  description: ant-forum api
  license: {}
  title: ant-forum API
  version: "1.0"
paths:
  /sd/cpu:
    get:
      consumes:
      - application/json
      description: Checks the cpu usage
      produces:
      - application/json
      responses:
        "200":
          description: 'CRITICAL - Load average: 1.78, 1.99, 2.02 | Cores: 2'
          schema:
            type: string
      summary: Checks the cpu usage
      tags:
      - sd
  /sd/disk:
    get:
      consumes:
      - application/json
      description: Checks the disk usage
      produces:
      - application/json
      responses:
        "200":
          description: 'OK - Free space: 17233MB (16GB) / 51200MB (50GB) | Used: 33%'
          schema:
            type: string
      summary: Checks the disk usage
      tags:
      - sd
  /sd/health:
    get:
      consumes:
      - application/json
      description: Shows OK as the ping-pong result
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Shows OK as the ping-pong result
      tags:
      - sd
  /sd/ram:
    get:
      consumes:
      - application/json
      description: Checks the ram usage
      produces:
      - application/json
      responses:
        "200":
          description: 'OK - Free space: 402MB (0GB) / 8192MB (8GB) | Used: 4%'
          schema:
            type: string
      summary: Checks the ram usage
      tags:
      - sd
  /v1/articles:
    get:
      consumes:
      - application/json
      description: 获取文章列表
      parameters:
      - description: Offset
        in: query
        name: offset
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"totalCount":1,"list":[]'
          schema:
            $ref: '#/definitions/articles.ListResponse'
      summary: 获取文章列表
      tags:
      - articles
    post:
      consumes:
      - application/json
      description: 创建文章
      parameters:
      - description: 创建文章
        in: body
        name: articles
        required: true
        schema:
          $ref: '#/definitions/articles.CreateRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":null}'
          schema:
            $ref: '#/definitions/v1.Response'
      summary: 创建文章
      tags:
      - articles
  /v1/articles/{id}:
    delete:
      consumes:
      - application/json
      description: 根据标签id删除文章
      parameters:
      - description: 文章的数据库id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":null}'
          schema:
            $ref: '#/definitions/v1.Response'
      summary: 根据标签id删除文章
      tags:
      - articles
    get:
      consumes:
      - application/json
      description: 用文章id获取单篇文章信息
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{}}'
          schema:
            $ref: '#/definitions/articles.GetArticleInfo'
      summary: 用文章id获取单篇信息
      tags:
      - articles
  /v1/auth/info:
    get:
      consumes:
      - application/json
      description: Get an user
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong"}}'
          schema:
            $ref: '#/definitions/model.UserInfo'
      summary: Get an user
      tags:
      - user
  /v1/categories:
    get:
      consumes:
      - application/json
      description: 获取分类列表
      parameters:
      - description: Offset
        in: query
        name: offset
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"totalCount":1,"list":[{"id":0,"category_name":"前端"}]}}'
          schema:
            $ref: '#/definitions/categories.ListResponse'
      summary: 获取分类列表
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: 创建分类
      parameters:
      - description: 创建新标签
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/categories.CreateRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"category_name":"前端"}}'
          schema:
            $ref: '#/definitions/categories.CreateResponse'
      summary: 创建分类
      tags:
      - categories
  /v1/categories/{id}:
    delete:
      consumes:
      - application/json
      description: 根据标签id删除分类
      parameters:
      - description: 标签数据的数据库id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":null}'
          schema:
            $ref: '#/definitions/v1.Response'
      summary: 根据标签id删除分类
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: 用分类id获取单个分类信息
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"id":0,"category_name":"前端"}}'
          schema:
            $ref: '#/definitions/model.CategoryInfo'
      summary: 用分类id获取单个分类信息
      tags:
      - categories
  /v1/login:
    post:
      consumes:
      - application/json
      description: 登录
      parameters:
      - description: login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.LoginRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1MjgwMTY5MjIsImlkIjowLCJuYmYiOjE1MjgwMTY5MjIsInVzZXJuYW1lIjoiYWRtaW4ifQ.LjxrK9DuAwAzUD8-9v43NzWBN7HXsSLfebw92DKd1JQ"}}'
          schema:
            $ref: '#/definitions/user.LoginResponse'
      summary: Login generates the authentication token
      tags:
      - login
  /v1/menu:
    get:
      consumes:
      - application/json
      description: 获取菜单列表
      parameters:
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"totalCount":1,"list":[{"id":0,"tag_name":"前端"}]}}'
          schema:
            $ref: '#/definitions/menu.ListResponse'
      summary: 获取菜单列表
      tags:
      - menu
    post:
      consumes:
      - application/json
      description: 创建菜单
      parameters:
      - description: 创建新标签
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/menu.CreateRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"tag_name":"前端"}}'
          schema:
            $ref: '#/definitions/menu.CreateResponse'
      summary: 创建菜单
      tags:
      - menu
  /v1/menu/{id}:
    delete:
      consumes:
      - application/json
      description: 根据菜单id删除菜单
      parameters:
      - description: 菜单数据的数据库id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":null}'
          schema:
            $ref: '#/definitions/v1.Response'
      summary: 根据菜单id删除菜单
      tags:
      - menu
    get:
      consumes:
      - application/json
      description: 获取单个菜单
      parameters:
      - description: 菜单数据的数据库id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"id":0,"category_name":"前端"}}'
          schema:
            $ref: '#/definitions/model.MenuInfo'
      summary: 获取单个菜单
      tags:
      - menu
    put:
      consumes:
      - application/json
      description: 更改菜单
      parameters:
      - description: 菜单数据的数据库id
        in: path
        name: id
        required: true
        type: integer
      - description: The user info
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/model.MenuModel'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":null}'
          schema:
            $ref: '#/definitions/v1.Response'
      summary: 更改菜单
      tags:
      - menu
  /v1/role:
    get:
      consumes:
      - application/json
      description: 获取角色列表
      parameters:
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"totalCount":1,"list":[{"id":0,"tag_name":"前端"}]}}'
          schema:
            $ref: '#/definitions/role.ListResponse'
      summary: 获取角色列表
      tags:
      - role
    post:
      consumes:
      - application/json
      description: 创建角色
      parameters:
      - description: 创建角色
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/role.CreateRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"tag_name":"前端"}}'
          schema:
            $ref: '#/definitions/role.CreateResponse'
      summary: 创建角色
      tags:
      - role
  /v1/role/{id}:
    delete:
      consumes:
      - application/json
      description: 根据角色id删除角色
      parameters:
      - description: 角色数据的数据库id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":null}'
          schema:
            $ref: '#/definitions/v1.Response'
      summary: 根据角色id删除角色
      tags:
      - role
    get:
      consumes:
      - application/json
      description: 获取单个角色
      parameters:
      - description: 角色数据的数据库id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"id":0,"category_name":"前端"}}'
          schema:
            $ref: '#/definitions/model.RoleInfo'
      summary: 获取单个角色
      tags:
      - role
    put:
      consumes:
      - application/json
      description: 更新角色数据
      parameters:
      - description: 角色数据的数据库id
        in: path
        name: id
        required: true
        type: integer
      - description: role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.RoleModel'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":null}'
          schema:
            $ref: '#/definitions/v1.Response'
      summary: 更新角色数据
      tags:
      - role
  /v1/tags:
    get:
      consumes:
      - application/json
      description: 获取标签列表
      parameters:
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"totalCount":1,"list":[{"id":0,"tag_name":"前端"}]}}'
          schema:
            $ref: '#/definitions/tags.ListResponse'
      summary: 获取标签列表
      tags:
      - tags
    post:
      consumes:
      - application/json
      description: 创建标签
      parameters:
      - description: 创建新标签
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/tags.CreateRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"tag_name":"前端"}}'
          schema:
            $ref: '#/definitions/tags.CreateResponse'
      summary: 创建标签
      tags:
      - tags
  /v1/tags/{id}:
    delete:
      consumes:
      - application/json
      description: 根据标签id删除标签
      parameters:
      - description: 标签数据的数据库id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":null}'
          schema:
            $ref: '#/definitions/v1.Response'
      summary: 根据标签id删除标签
      tags:
      - tags
    get:
      consumes:
      - application/json
      description: 用标签id获取单个标签信息
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"id":0,"tag_name":"前端"}}'
          schema:
            $ref: '#/definitions/model.TagInfo'
      summary: 用标签id获取单个标签信息
      tags:
      - tags
  /v1/user:
    get:
      consumes:
      - application/json
      description: List users
      parameters:
      - description: Offset
        in: query
        name: offset
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"totalCount":1,"userList":[{"id":0,"username":"admin","random":"user
            ''admin'' get random string ''EnqntiSig''","password":"$2a$10$veGcArz47VGj7l9xN7g2iuT9TF21jLI1YGXarGzvARNdnt4inC9PG","createdAt":"2018-05-28
            00:25:33","updatedAt":"2018-05-28 00:25:33"}]}}'
          schema:
            $ref: '#/definitions/user.ListResponse'
      security:
      - ApiKeyAuth: []
      summary: List the users in the database
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Add a new user
      parameters:
      - description: Create a new user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateRequest'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong"}}'
          schema:
            $ref: '#/definitions/user.CreateResponse'
      summary: Add new user to the database
      tags:
      - user
  /v1/user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user by ID
      parameters:
      - description: The user's database id index num
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":null}'
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Delete an user by the user identifier
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Get an user by id
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong"}}'
          schema:
            $ref: '#/definitions/model.UserInfo'
      summary: Get an user by the user id
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update a user by ID
      parameters:
      - description: The user's database id index num
        in: path
        name: id
        required: true
        type: integer
      - description: The user info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserModel'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":null}'
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Update a user info by the user identifier
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
